package _2_2初始线程_线程的基本操作._2_2_1新建线程.Lock;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 
 * @author admin：Wu_Being； Date&Time：2016-4-24 上午12:44:30；；
 */
public class CreateThread_WithInterface10 {

	//http://www.cnblogs.com/benshan/p/3551987.html
	public static void main(String[] args) {
		Lock lock = new ReentrantLock();

		Consumer consumer = new Consumer(lock);
		Producer producer = new Producer(lock);

		new Thread(consumer).start();
		new Thread(producer).start();

	}

	public class Consumer implements Runnable {

		private Lock lock;

		public Consumer(Lock lock) {
			this.lock = lock;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			int count = 10;
			while (count > 0) {
				try {
					lock.lock();
					count--;
					System.out.print("B");
				} finally {
					lock.unlock(); // 主动释放锁
					try {
						Thread.sleep(91L);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}

		}

	}

	public class Producer implements Runnable {

		private Lock lock;

		public Producer(Lock lock) {
			this.lock = lock;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			int count = 10;
			while (count > 0) {
				try {
					lock.lock();
					count--;
					System.out.print("A");
				} finally {
					lock.unlock();
					try {
						Thread.sleep(90L);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}
	
	
}
